name: Build bundles
on: [push]

jobs:
  Build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        #os: [macos-10.15, ubuntu-18.04, windows-2019]
        os: [ubuntu-18.04]
        node-version: [8.x]
    
    name: Build ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1.1.2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install NPM and Meteor (sh)
        if: matrix.os == 'ubuntu-18.04' || matrix.os == 'macos-10.15'
        run: |
          curl https://install.meteor.com/ | sh
          npm install --production --no-optional
      - name: Install NPM and Meteor (win)
        if: matrix.os == 'windows-2019'
        run: |
          choco install meteor
          npm install --production --no-optional
          echo "::add-path::C:\Users\runneradmin\AppData\Local\.meteor"
      
      - name: Build bundle
        run: meteor build --server localhost:8265 --directory ../tdarr-${{ matrix.os }}

      - name: Clean Linux
        if: matrix.os == 'ubuntu-18.04'
        run: |
            cd ../tdarr-${{ matrix.os }}/bundle/programs/
            rm -r \
              server/assets/app/HandBrakeCLI.exe \
              server/assets/app/ccextractor/ccextractorwin.exe \
              server/npm/node_modules/ffprobe-static/bin/win32/ \
              server/npm/node_modules/ffprobe-static/bin/darwin/ \
              server/npm/node_modules/nodegit/vendor/plink.exe \
              server/npm/node_modules/nodegit/vendor/pageant.exe

      - name: Clean MacOS
        if: matrix.os == 'macos-10.15'
        run: |
            cd ../tdarr-${{ matrix.os }}/bundle/programs/
            rm -r \
              server/assets/app/HandBrakeCLI.exe \
              server/assets/app/ccextractor/ccextractorwin.exe \
              server/npm/node_modules/ffprobe-static/bin/win32/ \
              server/npm/node_modules/ffprobe-static/bin/linux/ \
              server/npm/node_modules/nodegit/vendor/plink.exe \
              server/npm/node_modules/nodegit/vendor/pageant.exe

      - name: Pack ${{ matrix.os }}.zip (sh)
        if: matrix.os == 'ubuntu-18.04' || matrix.os == 'macos-10.15'
        run: |
            mkdir ../out
            zip -r -q ../out/tdarr-${{ matrix.os }}.zip ../tdarr-${{ matrix.os }}/

      - name: Pack ${{ matrix.os }}.zip (win)
        if: matrix.os == 'windows-2019'
        run: |
            mkdir ..\out
            7z a -r ..\out\tdarr-${{ matrix.os }}.zip ..\tdarr-${{ matrix.os }}\

      - uses: actions/upload-artifact@v1
        with:
          name: tdarr-${{ matrix.os }}
          path: ../out/

  Release:
    needs: Build
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Get version and changelog
        id: meta_gathering
        run: |
            echo "::set-output name=version::$(grep "newVersion, setNewVersion" imports/ui/App.jsx | awk -F"[()]" '{print $2}')"
            echo "::set-output name=relname::$(cat latest.txt | head -1)"
            echo "::set-output name=changelog::$(tail -n +2 latest.txt)"

      - name: Create tag
        run:  |
            git config --global user.email $(git log -1 --format="%ae")
            git config --global user.name $(git log -1 --format="%an")
            git tag v${{ steps.meta_gathering.outputs.version }}-Beta -F latest.txt

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.meta_gathering.outputs.version }}-Beta
          release_name: ${{ steps.meta_gathering.outputs.relname }}
          body: ${{ steps.meta_gathering.outputs.changelog }}
          draft: true
          prerelease: true
